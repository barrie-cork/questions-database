version: '3.9'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: pdf_extractor_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-question_bank}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pdf_question_extractor/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pdf_extractor_net

  app:
    build:
      context: ./pdf_question_extractor
      dockerfile: Dockerfile
    container_name: pdf_extractor_app
    restart: unless-stopped
    # Note: The app runs in its own container with isolated Python environment
    # The super_c venv is only used for running docker-compose commands
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-question_bank}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-question_bank}
      
      # API Keys
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # App Settings
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      # Mount source code for hot reload in development
      - ./pdf_question_extractor:/app:delegated
      # Persistent volumes
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      # Exclude Python cache and virtual environments
      - /app/__pycache__
      - /app/.pytest_cache
      - /app/.mypy_cache
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pdf_extractor_net
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Optional: Redis for caching and task queue (future enhancement)
  # redis:
  #   image: redis:7-alpine
  #   container_name: pdf_extractor_redis
  #   restart: unless-stopped
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - pdf_extractor_net
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  pdf_extractor_net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local